class(breseq) = "numeric"
breseq <- breseq[-c(which(rowSums(breseq)==35)),]
#rowSums(breseq)
# separate the mutation data
mut.num <- seq(1,nrow(breseq),1)
# add mutation numbers and remove from the breseq data file
breseq.mutno <- cbind(mut.num,rownames(breseq))
# transform the matrix to get strains in the rows
breseq <- t(breseq)
breseq.data <- breseq[-c(which(rowSums(breseq)==0)),]
print(rownames(breseq[which(rowSums(breseq)==0),]))
#merge the meta data
#breseq <- merge(strains, breseq, by = "strain.name", all = T)
# Chunk 3
strains <- read.csv("./data/strains.csv",header = T)
breseq.all <- as.data.frame(merge(strains,breseq, by.x = "strain_ID",by.y = 0))
breseq.minus <- breseq.all[breseq.all$trt=="Ph-",]
breseq.minus <- breseq.minus[,-c(which(colSums(breseq.minus[,6:117]) ==0))]
breseq.minus.muts = colnames(breseq.minus[3:41])
breseq.plus <- breseq.all[breseq.all$trt=="Ph+",]
breseq.plus <- breseq.plus[,-c(which(colSums(breseq.plus[,6:117]) ==0))]
breseq.plus.muts = colnames(breseq.plus[5:89])
both <- intersect(breseq.minus.muts,breseq.plus.muts)
phage.minus.only <- setdiff(breseq.minus.muts,breseq.plus.muts)
phage.plus.only <- setdiff(breseq.plus.muts,breseq.minus.muts)
# Chunk 4
breseq.N.plus <- breseq.plus[breseq.plus$lim == "N",]
breseq.N.plus.muts <- colnames(breseq.N.plus[5:ncol(breseq.N.plus)])
breseq.N.minus <- breseq.minus[breseq.minus$lim == "N",]
breseq.N.minus.muts <- colnames(breseq.N.minus[3:ncol(breseq.N.minus)])
breseq.P.plus <-breseq.plus[breseq.plus$lim == "P",]
breseq.P.plus.muts <- colnames(breseq.P.plus[5:ncol(breseq.P.plus)])
breseq.P.minus <- breseq.minus[breseq.minus$lim == "P",]
breseq.P.minus.muts <- colnames(breseq.P.minus[3:ncol(breseq.P.minus)])
# Mutations unique to phage exposed
setdiff(breseq.N.plus.muts,breseq.N.minus.muts)
# mutations unique to unexposed
setdiff(breseq.N.minus.muts,breseq.N.plus.muts)
# Mutations unique to phage exposed
setdiff(breseq.P.plus.muts,breseq.P.minus.muts)
# Mutations unique to phage exposed
setdiff(breseq.P.minus.muts,breseq.P.plus.muts)
# Chunk 5
# integrate circle plot script for all genomic mutations and highlight the ones from the candidate gene mutation list
# Ideally contains circle with gene sections and corresponding mutations added in
# Chunk 6: bor-dataFormatting
# Read in data file
inf.mat <- as.matrix(read.csv("./data/bor.csv"))
# Rearrange data file for the appropriate analyses
inf.mat <- t(inf.mat)
inf.strains <- inf.mat[8:nrow(inf.mat),6]
p.dat <- inf.mat[1:6,7:ncol(inf.mat)]
inf.mat <- inf.mat[-c(1:7),-c(1:6)]
rownames(inf.mat) <- inf.strains
class(inf.mat) <- "numeric"
# Subset the infection matrix for only the sequenced strains
index2 <- which(rownames(inf.mat)  %in% strain.names)
WH7803 <- inf.mat[rownames(inf.mat)=="WH7803",]
inf.mat2 <- inf.mat[index2,]
inf.mat2 <- rbind(inf.mat2,WH7803)
inf.mat2 <- inf.mat2[-c(27,31),-c(95,96)]
class(inf.mat2) = "numeric"
# Chunk 7: resistance
# Function to calculate resistance
infect.prop<-function(x){
x <- x[!is.na(x)] # remove NA's
length(x[x == 1])/length(x)
}
inf.dat <- matrix(NA,nrow = length(inf.strains), ncol=4)
# Calculate resistance
#rownames(inf.dat) <- inf.strains
inf.dat[,1] <- inf.strains
inf.dat [,2] <- round(apply(inf.mat,1,infect.prop),digits = 2)
inf.dat[1:85,3] <- round(apply(inf.mat[1:85,2:46],1,infect.prop),digits = 2)
inf.dat[88:225,3] <- apply(inf.mat[88:nrow(inf.mat),47:96],1,infect.prop)
inf.dat[1:85,4] <- apply(inf.mat[1:85,47:96],1,infect.prop)
inf.dat[88:225,4] <- apply(inf.mat[88:nrow(inf.mat),2:46],1,infect.prop)
names(inf.dat) <- c(NULL,NULL)
#Subset calculated  matrix with the sequenced strain names
WH7803 <- inf.dat[inf.dat[,1]=="WH7803"]
index <- which(inf.dat[,1]  %in% strain.names)
inf.dat2 <- inf.dat[index,]
inf.dat2 = inf.dat2[-c(27,31),]   # remove 12P2S5, 21P2S4 due to lack of inf data
inf.dat2 <- rbind(WH7803,inf.dat2)
rownames(inf.dat2) <- NULL
colnames(inf.dat2) = c("strain","Average","Home","Away")
#write.csv(inf.dat2,file = "./supporting-files/data/BOR.csv",row.names=FALSE)
rownames(inf.dat2) <- inf.dat2[,1]
inf.dat2 <- inf.dat2[,-1]
class(inf.dat2)="numeric"
# Chunk 8: dendrogram
#Note: Make two separate trait tables then merge data together in one graphic for the manuscript
require(ape); require(phylobase); require(RColorBrewer);require(adephylo)
# Make the distance matrix with infection matrix
inf.mat3 <- inf.mat2[-32,]
# Due to the high number of zeros, must transform data
#inf.dist <- vegdist(decostand(inf.mat3, method = "log"), method = "gower", na.rm = TRUE)
inf.dist <- vegdist(inf.mat3, method = "gower", na.rm = TRUE)
nj.tree <- nj(inf.dist)
# Define the Outgroup
#outgroup <- match("WH7803", nj.tree$tip.label)
# Create a Rooted Tree {ape}
#nj.rooted <- root(nj.tree, outgroup, resolve.root = TRUE)
#nj.rooted$edge.length <- nj.rooted$edge.length + min(nj.rooted$edge.length)
#nj.rooted <- drop.tip(nj.rooted, "WH7803")
# Alternative clustering algorithm for distance matrix
hc <- hclust(inf.dist, method = "complete")
hcp <- as.phylo(hc)
par(mar=c(1,1,1,1) + 0.2)
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
mypalette2 <- colorRampPalette(brewer.pal(9, "YlGnBu"))
mut.cts <- read.csv("./data/mut-cts.csv", header=T)
strain.list <- read.csv("./data/strains.csv")     #strain metadata
# Merge all the data together to make the tree
tree.dat <- merge(strain.list,mut.cts,by.x="strain_ID",by.y="strain")
tree.dat <- merge(inf.dat2,tree.dat,by.x = 0 ,by.y="strain_ID")
row.names(tree.dat) <- tree.dat[,1]
tree.dat2 <- tree.dat[-32,-c(1,8)]
pdf(file="./supporting-files/figures/fig-pub_traits-res.pdf",width = 3, height = 6)
x <- phylo4d(x = hcp, inf.dat2)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.35, scale = FALSE, use.edge.length = TRUE,
edge.color = "black", edge.width = 1, box = FALSE, grid = TRUE,
col= mypalette2(25),
# col = gray.colors(15, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL),
pch = 15, cex.symbol = 1.25,
ratio.tree = 0.25, cex.legend = 1.25, center = FALSE)
dev.off()
# Resistance + mutations
pdf(file="./supporting-files/figures/fig-pub_traits2.pdf",width = 5, height = 6)
x <- phylo4d(x = hcp, tree.dat2)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.35, scale = FALSE, use.edge.length = TRUE,
edge.color = "black", edge.width = 2, box = FALSE, grid = TRUE,
col= mypalette2(50),
# col = gray.colors(15, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL),
pch = 15, cex.symbol = 1,
ratio.tree = 0.20, cex.legend = 1, center = FALSE)
dev.off()
#check dimensions of matrices
dim(breseq);dim(inf.mat2)
rmv <- which(rownames(breseq)%in%setdiff(rownames(breseq),rownames(inf.mat2)))
which(rownames(inf.mat2)%in%setdiff(rownames(inf.mat2),rownames(breseq)))
# rmv=c(22,28,31,33,34)
breseq = breseq[-rmv,]
inf.mat2= inf.mat2[-32,]
#check dimensions of matrices
dim(breseq);dim(inf.mat2)
# Make a distance matrix for the mutational data
breseq.dist <- vegdist(breseq, method="gower", na.rm = TRUE)
inf.dist <- vegdist(inf.mat2, method="gower", na.rm = TRUE)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 999)
man.test
plot(man.test)
# Chunk 1: setup
# setwd("C:/Users/meglarse/GitHub/larsen-dissertation/analyses/chpt3_Genetic/")
#Load Packages
require(phylobase);require(picante)
require(ape)
# Chunk 2: data-formatting
rm(list = ls())
# read in selected data files for analysis
breseq <- read.csv("./data/breseq.compare.csv", header = T)      #breseq produced compare file
#remove rRNA mutations (details below)
breseq <-breseq[!(grepl("16S",breseq$X.39)),]
# Prior to this point, the mutation annotation data has been moved to a separate file.
breseq = breseq[,-c(2,39,40,41)]
# Chunk 3
breseq <- breseq[,-which(breseq[1,]=="03N1S1.g")]
breseq <- breseq[-which(breseq[,1]=="1"),]
# Chunk 4: data-formatting
# restructure data for analysis
# rename the strains
N <- 6
strains = as.matrix(breseq[1,-1])
strain.names <- sapply(strsplit(strains, ""), function(x, n) paste(head(x, n), collapse = ""), N)
# Remove unnecessary rows
breseq <- breseq[-which(breseq[,1]=="position"),]
# Convert matrix into binary data file.
# Predicted mutation goes from 100% to 1
# empty cell to 0
# "?" to an NA suggesting that there isn't enough information to predict a mutation
breseq <- as.matrix(breseq)
breseq[breseq == "100%"] <- 1
breseq[breseq == "?"] <- 0
breseq[breseq == ""] <- 0
#rename the columns and rows
rownames(breseq) <- breseq[,1]
breseq <- breseq[,-1]
colnames(breseq) = strain.names
# remove rRNA hits
#breseq <- breseq[-c(which(rownames(breseq) == "2,019,461"):which(rownames(breseq) == "2,020,083")),]
# Remove rows with no predicted mutations
class(breseq) = "numeric"
breseq <- breseq[-c(which(rowSums(breseq)==35)),]# DS: this rremoves mutations shared by all strains
#rowSums(breseq)
# separate the mutation data
mut.num <- seq(1,nrow(breseq),1)
# add mutation numbers and remove from the breseq data file
breseq.mutno <- cbind(mut.num,rownames(breseq))
# transform the matrix to get strains in the rows
breseq <- t(breseq)
#DS: remove strains with no mutations
breseq <- breseq[-c(which(rowSums(breseq)==0)),]
# print(rownames(breseq[which(rowSums(breseq)==0),]))
#merge the meta data
#breseq <- merge(strains, breseq, by = "strain.name", all = T)
# Chunk 5
strains <- read.csv("./data/strains.csv",header = T)
breseq.all <- as.data.frame(merge(strains,breseq, by.x = "strain_ID",by.y = 0))
breseq.minus <- breseq.all[breseq.all$trt=="Ph-",]
# DS: This line removes positions which have no mutations in Ph-
#these comments were addressed
# # DS: I am not sure why the column are limited to 117
# # DS: What is left out?
# colnames(breseq.minus[,118:ncol(breseq.minus)])
# # Maybe this was meant to remove rRNA mutations which was commented out above???
# #This takes out more than that...
# # I will add code above to remove rRNA mutations and the subset here with all columns
# sum(colSums(breseq.minus[,6:ncol(breseq.minus)]) >0)
breseq.minus <- breseq.minus[,c(1:5,(c(which(colSums(breseq.minus[,6:ncol(breseq.minus)])>0))+5))]
breseq.minus.muts = colnames(breseq.minus[6:ncol(breseq.minus)])
# breseq.plus <- breseq.all[breseq.all$trt=="Ph+",]
# breseq.plus <- breseq.plus[,-c(which(colSums(breseq.plus[,6:117]) ==0))]
# breseq.plus.muts = colnames(breseq.plus[5:89])
breseq.plus <- breseq.all[breseq.all$trt=="Ph+",]
breseq.plus <- breseq.plus[,c(1:5,(c(which(colSums(breseq.plus[,6:ncol(breseq.plus)])>0))+5))]
breseq.plus.muts = colnames(breseq.plus[6:ncol(breseq.plus)])
both <- intersect(breseq.minus.muts,breseq.plus.muts)
phage.minus.only <- setdiff(breseq.minus.muts,breseq.plus.muts)
phage.plus.only <- setdiff(breseq.plus.muts,breseq.minus.muts)
# Chunk 6
# subset by phage and limiting nutrient
breseq.N.plus <- breseq.plus[breseq.plus$lim == "N",]
breseq.N.minus <- breseq.minus[breseq.minus$lim == "N",]
breseq.P.plus <-breseq.plus[breseq.plus$lim == "P",]
breseq.P.minus <- breseq.minus[breseq.minus$lim == "P",]
#filter out columns with no mutations
breseq.N.plus <- breseq.N.plus[,which(colSums(breseq.N.plus[6:ncol(breseq.N.plus)])>0)+5]
breseq.N.minus <- breseq.N.minus[,which(colSums(breseq.N.minus[6:ncol(breseq.N.minus)])>0)+5]
breseq.P.plus <- breseq.P.plus[,which(colSums(breseq.P.plus[6:ncol(breseq.P.plus)])>0)+5]
breseq.P.minus <- breseq.P.minus[,which(colSums(breseq.P.minus[6:ncol(breseq.P.minus)])>0)+5]
#save mutatated positions by subset
breseq.N.plus.muts <- colnames(breseq.N.plus[6:ncol(breseq.N.plus)])
breseq.N.minus.muts <- colnames(breseq.N.minus[6:ncol(breseq.N.minus)])
breseq.P.plus.muts <- colnames(breseq.P.plus[6:ncol(breseq.P.plus)])
breseq.P.minus.muts <- colnames(breseq.P.minus[6:ncol(breseq.P.minus)])
# Mutations unique to phage exposed (N)
setdiff(breseq.N.plus.muts,breseq.N.minus.muts)
# mutations unique to unexposed (N)
setdiff(breseq.N.minus.muts,breseq.N.plus.muts)
#shared mutations
intersect(breseq.N.minus.muts,breseq.N.plus.muts)
# Mutations unique to phage exposed (P)
setdiff(breseq.P.plus.muts,breseq.P.minus.muts)
# Mutations unique to no unexposed (P)
setdiff(breseq.P.minus.muts,breseq.P.plus.muts)
#shared mutations
intersect(breseq.P.minus.muts,breseq.P.plus.muts)
# Chunk 7
# integrate circle plot script for all genomic mutations and highlight the ones from the candidate gene mutation list
# Ideally contains circle with gene sections and corresponding mutations added in
# Chunk 8: bor-dataFormatting
# Read in data file
inf.mat <- as.matrix(read.csv("./data/bor.csv"))
# Chunk 9: bor-dataFormatting
# Rearrange data file for the appropriate analyses
inf.mat <- t(inf.mat)
inf.strains <- inf.mat[8:nrow(inf.mat),6]
p.dat <- inf.mat[1:6,7:ncol(inf.mat)]
inf.mat <- inf.mat[-c(1:7),-c(1:6)]
rownames(inf.mat) <- inf.strains
class(inf.mat) <- "numeric"
# Subset the infection matrix for only the sequenced strains
strain.names <- as.character(breseq.all$strain_ID)
index2 <- which(rownames(inf.mat)  %in% strain.names)
WH7803 <- inf.mat[rownames(inf.mat)=="WH7803",]
inf.mat2 <- inf.mat[index2,]
inf.mat2 <- rbind(inf.mat2,WH7803)
# This next line is meant to remove columns and rows with missing data
# inf.mat2 <- inf.mat2[-c(27,31),-c(95,96)]#MLs command
# DS: my version:
# remove rows with all missing values
inf.mat2 <- inf.mat2[rowSums(is.na(inf.mat2))<ncol(inf.mat2),]
# remove columns with many missing values
col.rm <- colSums(is.na(inf.mat2))<5
inf.mat2 <- inf.mat2[,col.rm]
class(inf.mat2) = "numeric"
# DS: For some reason after cleaning the next code chunk uses the pre-clean data
# this cleans the metadata
inf.strains2 <- inf.strains[inf.strains %in% row.names(inf.mat2)]
p.dat2 <- p.dat[,col.rm]
# Chunk 10: resistance
# Function to calculate resistance
infect.prop<-function(x){
x <- x[!is.na(x)] # remove NA's
length(x[x == 1])/length(x)
}
inf.dat <- matrix(NA,nrow = length(inf.strains), ncol=4)
# Calculate resistance
#rownames(inf.dat) <- inf.strains
inf.dat[,1] <- inf.strains
inf.dat [,2] <- round(apply(inf.mat,1,infect.prop),digits = 2)
inf.dat[1:85,3] <- round(apply(inf.mat[1:85,2:46],1,infect.prop),digits = 2) #N host and N phage
inf.dat[88:225,3] <- apply(inf.mat[88:nrow(inf.mat),47:96],1,infect.prop) # P host and P phage
inf.dat[1:85,4] <- apply(inf.mat[1:85,47:96],1,infect.prop)
inf.dat[88:225,4] <- apply(inf.mat[88:nrow(inf.mat),2:46],1,infect.prop)
names(inf.dat) <- c(NULL,NULL)
#Subset calculated  matrix with the sequenced strain names
# WH7803 <- inf.dat[inf.dat[,1]=="WH7803"]
# index <- which(inf.dat[,1]  %in% strain.names) #MLs
index <- which(inf.dat[,1]  %in% inf.strains2)
inf.dat2 <- inf.dat[index,]
# inf.dat2 = inf.dat2[-c(27,31),]   # remove 12P2S5, 21P2S4 due to lack of inf data
#DS: already removed
# inf.dat2 <- rbind(WH7803,inf.dat2)
rownames(inf.dat2) <- NULL
colnames(inf.dat2) = c("strain","Average","Home","Away")
#write.csv(inf.dat2,file = "./supporting-files/data/BOR.csv",row.names=FALSE)
rownames(inf.dat2) <- inf.dat2[,1]
inf.dat2 <- inf.dat2[,-1]
class(inf.dat2)="numeric"
# Chunk 11: dendrogram
#Note: Make two separate trait tables then merge data together in one graphic for the manuscript
require(ape); require(phylobase); require(RColorBrewer);require(adephylo)
# Make the distance matrix with infection matrix
#remove ansector
inf.mat3 <- inf.mat2[!(rownames(inf.mat2)=="WH7803"),]
# Due to the high number of zeros, must transform data
#inf.dist <- vegdist(decostand(inf.mat3, method = "log"), method = "gower", na.rm = TRUE)
inf.dist <- vegdist(inf.mat3, method = "gower", na.rm = TRUE)
nj.tree <- nj(inf.dist)
# Define the Outgroup
#outgroup <- match("WH7803", nj.tree$tip.label)
# Create a Rooted Tree {ape}
#nj.rooted <- root(nj.tree, outgroup, resolve.root = TRUE)
#nj.rooted$edge.length <- nj.rooted$edge.length + min(nj.rooted$edge.length)
#nj.rooted <- drop.tip(nj.rooted, "WH7803")
###############
# PICKUP HERE #
###############
# Alternative clustering algorithm for distance matrix
hc <- hclust(inf.dist, method = "complete")
hcp <- as.phylo(hc)
par(mar=c(1,1,1,1) + 0.2)
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
mypalette2 <- colorRampPalette(brewer.pal(9, "YlGnBu"))
mut.cts <- read.csv("./data/mut-cts.csv", header=T)
strain.list <- read.csv("./data/strains.csv")     #strain metadata
# Merge all the data together to make the tree
tree.dat <- merge(strain.list,mut.cts,by.x="strain_ID",by.y="strain")
tree.dat <- merge(inf.dat2,tree.dat,by.x = 0 ,by.y="strain_ID")
row.names(tree.dat) <- tree.dat[,1]
tree.dat2 <- tree.dat[-32,-c(1,8)]
pdf(file="./supporting-files/figures/DS_fig-pub_traits-res.pdf",width = 3, height = 6)
x <- phylo4d(x = hcp, inf.dat2)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.35, scale = FALSE, use.edge.length = TRUE,
edge.color = "black", edge.width = 1, box = FALSE, grid = TRUE,
col= mypalette2(25),
# col = gray.colors(15, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL),
pch = 15, cex.symbol = 1.25,
ratio.tree = 0.25, cex.legend = 1.25, center = FALSE)
dev.off()
# Resistance + mutations
pdf(file="./supporting-files/figures/DS_fig-pub_traits2.pdf",width = 5, height = 6)
x <- phylo4d(x = hcp, tree.dat2)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.35, scale = FALSE, use.edge.length = TRUE,
edge.color = "black", edge.width = 2, box = FALSE, grid = TRUE,
col= mypalette2(50),
# col = gray.colors(15, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL),
pch = 15, cex.symbol = 1,
ratio.tree = 0.20, cex.legend = 1, center = FALSE)
dev.off()
#check dimensions of matrices
dim(breseq);dim(inf.mat2)
rmv <- which(rownames(breseq)%in%setdiff(rownames(breseq),rownames(inf.mat2)))
# rmv=c(22,28,31,33,34)
breseq = breseq[-rmv,]
inf.mat2= inf.mat2[-which(rownames(inf.mat2)%in%setdiff(rownames(inf.mat2),rownames(breseq))),]
#inf.dat2 = inf.dat2[-32,]
# Make a distance matrix for the mutational data
breseq.dist <- vegdist(breseq, method="gower", na.rm = TRUE)
inf.dist <- vegdist(inf.mat2, method="gower", na.rm = TRUE)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 999)
plot(man.test)
man.test
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 5000)
plot(man.test)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 20000)
plot(man.test)
dev.off()
plot(man.test)
breseq.dist
inf.dist
mantel.test(breseq.dist, inf.dist. graph = T)
mantel.test(breseq.dist, inf.dist, graph = T)
as.matrix(breseq.dist)
mantel.test(as.matrix(breseq.dist), as.matrix(inf.dist), graph = T)
summary(mantel.test(as.matrix(breseq.dist), as.matrix(inf.dist), graph = T))
mantel.test(as.matrix(breseq.dist), as.matrix(inf.dist), graph = T)
mantel(breseq.dist, inf.dist)
plot(mantel(breseq.dist, inf.dist))
mantel(breseq.dist, inf.dist)
mantel.rtest(breseq.dist, inf.dist)
mantel.rtest(breseq.dist, inf.dist, nrepet = 999)
plot(man.test)
breseq.dist
# DS: I am getting a bimodal distribution of randomized results.
# I will seperate it into treatments nd test each one seperatly (Nathan's idea).
breseq
rownames(breseq)
colnames(breseq)
# DS: I am getting a bimodal distribution of randomized results.
# I will seperate it into treatments nd test each one seperatly (Nathan's idea).
breseq.p <-
rownames(breseq)
rownames(breseq)
grep("p",rownames(breseq))
grep(".*p.*",rownames(breseq))
grepl(".*p.*",rownames(breseq))
grepl(".*P.*",rownames(breseq))
grepl("P",rownames(breseq))
grepl("N",rownames(breseq))
grepl("P",rownames(breseq))-grepl("N",rownames(breseq))
grepl("P",rownames(breseq))+grepl("N",rownames(breseq))
# DS: I am getting a bimodal distribution of randomized results.
# I will seperate it into treatments nd test each one seperatly (Nathan's idea).
breseq.p <- breseq[grepl("P",rownames(breseq)),]
breseq.n <- breseq[grepl("N",rownames(breseq)),]
row.names(inf.mat2.p)
row.names(inf.mat2)
grepl("P",row.names(inf.mat2))
inf.mat2.p <- inf.mat2[grepl("P",row.names(inf.mat2)),]
grepl("P",row.names(inf.mat2)+grepl("N",row.names(inf.mat2)
)
)
grepl("P",row.names(inf.mat2))+grepl("N",row.names(inf.mat2))
inf.mat2.n <- inf.mat2[grepl("N",row.names(inf.mat2)),]
man.test <- mantel.randtest(inf.dist,breseq.dist, nrepet = 999)
plot(man.test)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 999)
plot(man.test)
man.test <- mantel.randtest(inf.dist,breseq.dist, nrepet = 999)
plot(man.test)
dim(breseq.p);dim(inf.mat2.p)
dim(breseq.n);dim(inf.mat2.n)
# Make a distance matrix for the mutational data
breseq.dist.p <- vegdist(breseq,p, method="gower", na.rm = TRUE)
# Make a distance matrix for the mutational data
breseq.dist.p <- vegdist(breseq.p, method="gower", na.rm = TRUE)
inf.dist.p <- vegdist(inf.mat2.p, method="gower", na.rm = TRUE)
breseq.dist.n <- vegdist(breseq.n, method="gower", na.rm = TRUE)
inf.dist.n <- vegdist(inf.mat2.n, method="gower", na.rm = TRUE)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist.n, inf.dist.n, nrepet = 999)
plot(man.test)
man.test
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist.p, inf.dist.p, nrepet = 999)
plot(man.test)
man.test
plot(man.test,main="P only")
plot(man.test)
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 999)
plot(man.test, main= "all data")
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist.p, inf.dist.p, nrepet = 999)
plot(man.test,main="P only")
man.test <- mantel.randtest(breseq.dist.n, inf.dist.n, nrepet = 999)
plot(man.test, main="N only")
# perform Mantel Test between two distance matrices
man.test <- mantel.randtest(breseq.dist, inf.dist, nrepet = 999)
plot(man.test, main= "all data")
# perform Mantel Test between two distance matrices
man.test.p <- mantel.randtest(breseq.dist.p, inf.dist.p, nrepet = 999)
plot(man.test.p,main="P only")
man.test.n <- mantel.randtest(breseq.dist.n, inf.dist.n, nrepet = 999)
plot(man.test.n, main="N only")
cowplot::plot_grid(plot(man.test, main= "all data"))
A <- plot(man.test, main= "all data")
A <- ~plot(man.test, main= "all data")
cowplot::plot_grid(A)
A <- ~plot(man.test, main= "all data")
B <- ~plot(man.test.p, main= "all data")
C <- ~plot(man.test.n, main= "all data")
cowplot::plot_grid(A,B,C)
B <- ~plot(man.test.p, main= "P only")
C <- ~plot(man.test.n, main= "N only")
cowplot::plot_grid(A,B,C)
cowplot::plot_grid(A,(B,C))
cowplot::plot_grid(A,NULL,B,C)
B <- ~plot(man.test.p, main= paste0("P only; P=", man.test.p$pvalue))
C <- ~plot(man.test.n, main= "N only")
cowplot::plot_grid(A,NULL,B,C)
A <- ~plot(man.test, main= paste0("all data; P=", man.test$pvalue))
B <- ~plot(man.test.p, main= paste0("P only; P=", man.test.p$pvalue))
C <- ~plot(man.test.n, main= paste0("N only; P=", man.test.n$pvalue))
cowplot::plot_grid(A,NULL,B,C)
A <- ~plot(man.test, main= paste0("all data; P=", man.test$pvalue))
B <- ~plot(man.test.p, main= paste0("P only; P=", man.test.p$pvalue))
C <- ~plot(man.test.n, main= paste0("N only; P=", man.test.n$pvalue))
cowplot::plot_grid(A,NULL,B,C)
breseq.p
inf.mat2.p
